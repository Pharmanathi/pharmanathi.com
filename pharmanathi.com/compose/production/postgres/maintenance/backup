#!/usr/bin/env bash


### Create a database backup.
###
### Usage:
###     $ docker compose -f <environment>.yml (exec |run --rm) postgres backup


set -o errexit
set -o pipefail
set -o nounset

# script's optinals such as tables to exclude
options=${1:-}
working_dir="$(dirname ${0})"
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"


message_welcome "Backing up the '${POSTGRES_DB}' database using options '${options}'"

if [[ "${POSTGRES_USER}" == "postgres" ]]; then
    message_error "Backing up as 'postgres' user is not supported. Assign 'POSTGRES_USER' env with another one and try again."
    exit 1
fi

export PGHOST="${POSTGRES_HOST}"
export PGPORT="${POSTGRES_PORT}"
export PGUSER="${POSTGRES_USER}"
export PGPASSWORD="${POSTGRES_PASSWORD}"
export PGDATABASE="${POSTGRES_DB}"

backup_filename="${BACKUP_FILE_PREFIX}_$(date +'%Y_%m_%dT%H_%M_%S').sql.gz"
backup_filename_data_only="${BACKUP_FILE_PREFIX}_$(date +'%Y_%m_%dT%H_%M_%S')_DATA_ONLY.sql.gz"
pg_dump $options | gzip > "${BACKUP_DIR_PATH}/${backup_filename}"
pg_dump --data-only --column-inserts --disable-triggers | gzip > "${BACKUP_DIR_PATH}/${backup_filename_data_only}"


message_success "'${POSTGRES_DB}' database backup '${backup_filename}' '${backup_filename_data_only}' and have been created and placed in '${BACKUP_DIR_PATH}'."
